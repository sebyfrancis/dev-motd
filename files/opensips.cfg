# must add opensips_ back to subscriber and location tables

####### Global Parameters #########
server_header="Server: Platform28"
user_agent_header="User-Agent: Platform28"

debug=7
log_stderror=no
log_facility=LOG_LOCAL3
fork=yes
children=4
/* uncomment the following lines to enable debugging */
#debug=9
#fork=no
#log_stderror=yes

advertised_address="54.236.115.203"

#mhomed=yes
port=5060
#auto_aliases=yes
alias=54.236.115.203:5060
alias=10.0.2.10:5060
listen=udp:10.0.2.10:5060   # CUSTOMIZE ME
listen=tcp:10.0.2.10:5060
check_via=1
disable_tcp=no
db_version_table="opensips_version"
####### Modules Section ###########

#set module path
mpath="/usr/lib64/opensips/modules/"

loadmodule "db_mysql.so"
loadmodule "db_unixodbc.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "acc.so"
loadmodule "uac_auth.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "alias_db.so"
loadmodule "domain.so"
loadmodule "group.so"
loadmodule "drouting.so" 
loadmodule "dialog.so" 
loadmodule "avpops.so"
loadmodule "dialplan.so"
loadmodule "rtpproxy.so"
loadmodule "nathelper.so"
loadmodule "nat_traversal.so"
#loadmodule "mi_xmlrpc.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
loadmodule "xcap.so"
loadmodule "pua.so"
loadmodule "pua_dialoginfo.so"
loadmodule "pua_usrloc.so"
loadmodule "permissions.so"
loadmodule "load_balancer.so"
loadmodule "db_text.so"
loadmodule "regex.so"
loadmodule "siptrace.so"

# ----------------- setting module-specific parameters ---------------
# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

# ----- rr params -----
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- sip trace ------
modparam("siptrace", "duplicate_uri", "sip:10.0.2.22:9060")
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "db_url", "mysql://user:passwd@host/dbname")
modparam("siptrace", "duplicate_with_hep", 1)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
#HEPv2 == timestamp will be included to HEP header
#modparam("siptrace", "hep_version", 2)

# ----- usrloc params -----
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url", "mysql://platform28:Hazzah@db.aws1.platform28.com/platform28")
#modparam("usrloc", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")


# ----- acc params -----
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "db_flag", 1)
modparam("acc", "db_missed_flag", 2)
modparam("acc", "db_url","mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
#modparam("acc", "db_extra", "caller_id=$avp(caller);callee_id=$avp(callee)")

# ----- auth_db params -----
modparam("auth_db", "calculate_ha1", 0)
#modparam("auth_db", "password_column", "password")
modparam("auth_db", "password_column", "ha1")
#modparam("auth_db", "password_column_2", "ha1b")
modparam("auth_db", "db_url", "mysql://platform28:Hazzah@db.aws1.platform28.com/platform28")
#modparam("auth_db", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
#modparam("auth_db", "db_url", "text:///tmp/opensipsdb")
modparam("auth_db", "use_domain", 1)


# ----- alias_db params -----
modparam("alias_db", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")


# ----- domain params -----
modparam("domain", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("domain", "db_mode", 1)   # Use caching


# ----- group parameters ---- #
modparam("group", "use_domain", 1)
modparam("group", "table", "grp")
modparam("group", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")


# ----- multi-module params -----
modparam("auth_db|usrloc|uri_db", "use_domain", 1)

# ----- drouting params -----
modparam("drouting", "use_domain", 1)
modparam("drouting", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("drouting", "drd_table", "dr_gateways_aws1")
#modparam("drouting", "drr_table", "dr_rules_aws1")
modparam("drouting", "drg_table", "dr_groups_aws1")
modparam("drouting", "drc_table", "dr_carriers_aws1")

# ---- dialplan params ----
modparam("auth_db", "load_credentials", "")
modparam("dialplan", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
## attribute of the matched line will be store in the $avp(dest) 
modparam("dialplan", "attrs_pvar", "$avp(dest)")

#------ avpops params -----
modparam("avpops", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("avpops", "avp_table", "usr_preferences")

#------ tm params ----
modparam("tm", "fr_inv_timer",60)
#modparam("tm", "fr_timer", 5)

#------ nat parameters ----
modparam("registrar","received_avp", "$avp(42)")
modparam("usrloc","nat_bflag", 6)
modparam("nathelper","received_avp", "$avp(42)")
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", 7)
modparam("nathelper", "sipping_from", "sip:pinger@10.0.2.10:5060")
#modparam("nathelper", "natping_socket", "192.168.1.1:5006")
#modparam("rtpproxy", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("rtpproxy","rtpproxy_sock", "udp:127.0.0.1:12221")
modparam("rtpproxy", "rtpp_notify_socket", "tcp:127.0.0.1:9999")
# ----- presence params -----
modparam("presence", "db_url","mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("xcap", "db_url","mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("presence_xml", "force_active", 1)
modparam("presence", "server_address", "sip:10.0.2.10:5060")
modparam("xcap", "integrated_xcap_server", 1)
modparam("presence_xml", "pidf_manipulation", 1)

modparam("pua", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("pua_usrloc", "default_domain", "10.0.2.10")

# ----- presence params -----

modparam("dialog", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "db_mode", 1)

# ----- permissions params -------

modparam("permissions", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")

# ----- load_balancer params ------

modparam("load_balancer", "db_url", "mysql://opensips:opensipsrw@db.aws1.platform28.com/opensips")
modparam("load_balancer", "db_table","load_balancer_aws1")
modparam("load_balancer", "probing_interval", 60)
modparam("load_balancer", "probing_from", "sip:pinger@192.168.201.209")
modparam("load_balancer", "probing_reply_codes", "501, 403")

modparam("auth_db", "skip_version_check", 1)
modparam("db_text", "db_mode", 1)

# -- pua_dialoginfo params --
modparam("pua_dialoginfo", "presence_server", "sip:sa@192.168.201.209:5060")

####### Routing Logic ########
# main request routing logic
route{
	# log the basic info regarding this call
	xlog("L_INFO", "$ci|P28-openSIPS|recieved $oP request $rm $ou");
	xlog("L_INFO", "$ci|P28-openSIPS|source $si:$sp");
	xlog("L_INFO", "$ci|P28-openSIPS|from $fu");
	xlog("L_INFO", "$ci|P28-openSIPS|to $tu");
	xlog("L_INFO", "$ci|P28-openSIPS|RURI port $rp");

	# sip trace for homer
	setflag(22);
	sip_trace();	
	
	# Check if we are in a loop
	if (!mf_process_maxfwd_header("70")) {
		xlog("L_WARN", "$ci|P28-openSIPS|end|to many hops");
		send_reply("483","Too Many Hops");
		exit;
	}
	
	# NAT fixups
	force_rport();
	if (nat_uac_test("16")) {
		xlog("L_INFO", "$ci:P28-openSIPS|shows call from NATed device\n");
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			fix_nated_contact();
			search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes');
		}
	}

	#---- Sequential requests section ----#
	if (has_totag()) {
		xlog("L_INFO","$ci|P28-openSIPS|has_totag\n");
		# sequential request within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(1); # do accounting ...
				setflag(3); # ... even if the transaction fails
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}
			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(generic_relay);
		} else {
			/* uncomment the following lines if you want to enable presence */
			if (is_method("SUBSCRIBE")) {
				# in-dialog subscribe requests
				route(presence_handling);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}


	#---- initial requests section ----#
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}
	
	#---- catch retransmissions ----#
	t_check_trans();

	#---- authenticate caller if local ----#
	xlog("L_INFO", "$ci|P28-openSIPS|about to check if proxy authentication is required.\n");
	if (!is_method("REGISTER") && is_from_local()) {
		if(!(($fu =~ "^sip:((acd)|(emailgw)|(dialer)|(kernel[0-9]*-.*[^@]))@backend.platform28.com$" || $fu == "sip:nagios1@backend.platform28.com" || $fu == "sip:nagios2@backend.platform28.com") && $si =~ "^((192\.168\.201\.)|(10\.0\.)).*" )) {
			if(!is_from_gw()){ 
				if (!proxy_authorize("", "opensips_subscriber")) {
					xlog("L_INFO", "$ci|P28-openSIPS|Not Authorized issuing 407 [$fu/$tu/$ru/$ci]\n");
					proxy_challenge("", "0");
					exit;
				}
				if (!db_check_from()) {
					send_reply("403","Forbidden auth ID");
					xlog("L_INFO", "$ci|P28-openSIPS|Sending Forbidden auth ID 403 [$fu/$tu/$ru/$ci]\n");
					exit;
				}
			
				if(!search("^User-Agent: X-Lite")) pua_set_publish();
			
				consume_credentials();
				# caller authenticated
			}
		} else {
			xlog("L_INFO", "$ci|P28-openSIPS|this is the kernel-dialer-acd-nagios1-nagios2.\n");
		}
	}


	#----  preloaded route checking ----#
	if (loose_route()) {
		xlog("L_ERR", "$ci|P28-openSIPS|Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}

	#----  record routing ----#
	if (!is_method("REGISTER|MESSAGE"))
		xlog("$ci|P28-openSIPS|no register or message -> record_route.\n");
		record_route();


	#---- account only INVITEs -----#
	if (is_method("INVITE")) {
		setflag(1); # do accounting
		$avp(caller) = $fu;
		xlog("$ci|P28-openSIPS|creating dialog\n");
		#create_dialog();
		xlog("$ci|P28-openSIPS|Dialog $DLG_did\n");
	}

	#---- Routing to external domains ----#
	if (!is_uri_host_local()) {
		$avp(callee) = $ru;
		route(generic_relay);
		exit;
	}

	#--- presence diversion ----#
	if (is_method("PUBLISH|SUBSCRIBE")) {
		route(presence_handling);
		exit;
	}
	
	#--- registration handling ----#
	if (is_method("REGISTER")) {
		# authenticate the REGISTER requests
		if (($tu =~ "^sip:((acd)|(emailgw)|(dialer)|(kernel[0-9]*-.*[^@]))@backend.platform28.com$" || $tu == "sip:nagios1@backend.platform28.com" || $tu == "sip:nagios2@backend.platform28.com") && $si =~ "^((192\.168\.201\.)|(10\.0\.)).*") {
			xlog("$ci|P28-openSIPS|this is the ACD, Kernel or Nagios\n");
			t_newtran(); 
			if (!save("opensips_location"))
				sl_reply_error();
			exit;
		}
		if (!www_authorize("", "opensips_subscriber")) {
			www_challenge("", "0");
			exit;
		}
		
		if (!db_check_to()) {
			send_reply("403","Forbidden auth ID");
			exit;
		}

		#---- Request is behind NAT(flag5) save with bflag 6 ----#
		#---- Use bflag 7 to start SIP pinging (Options)     ----#
		if (isflagset(5)) {
			setbflag(6);
			setbflag(7);
		};

		if (!save("opensips_location", "fc01"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL && !is_method("REFER")) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}

	# apply DB based aliases 
	alias_db_lookup("dbaliases");


	#--- handle local numbers ----#
	# FROM CARRIER
	if(is_from_gw("0")) {
	        if (pcre_match("$tU", "^(14048919436)")) {
                        xlog("$ci|P28-openSIPS|IS TEST Destination\n");
                        route(test_routing);
                }
		xlog("$ci|P28-openSIPS|IS FROM GATEWAY\n");
		route(lb_media_routing);
	}
	
	# FROM FREESWITCH
	if(is_from_gw("1")) {
		xlog("$ci|P28-openSIPS|IS FROM INTERNAL GATEWAY - $tU\n");
		if (pcre_match("$tU", "^(1?555.*)|^(1?554.*)")) {
			xlog("$ci|P28-openSIPS|IS FS Loopback Destination\n");
			route(lb_media_routing_internal);
		}
		if (pcre_match("$tU", "^([2-9]\d\d[2-9]\d{6})")) {
 			xlog("$ci|P28-openSIPS|IS PSTN Destination\n");
 			subst_user('/^([0-9]+)$/1\1/');
	 		route(pstn_routing);
 		}
		if (pcre_match("$tU", "^(\+1|1)?([2-9]\d\d[2-9]\d{6})")) {
 			xlog("$ci|P28-openSIPS|IS PSTN Destination\n");
	 		route(pstn_routing);
 		}
		route(user_location);
	}

# Old excel logic	
#	if(is_from_gw("2")) {
#		xlog("$ci|P28-openSIPS|IS FROM EXCEL - $tU\n");
#		# $ru = "sip:" + $rU + "@" + $rd;
#		# xlog("$ci|P28-openSIPS|this is the request uri now: $ru\n");
#		dp_translate("1","$ruri.user/$ruri.user");
#		route(media_routing);
#	}

	# MESSAGE handling
	if (is_method("MESSAGE")) {
		xlog("this is a message\n");
		route(user_location);
	}
	xlog("L_INFO", "$ci|P28-openSIPS|dp_translate|$ruri.user/$ruri.user\n");
        if(!dp_translate("0","$ruri.user/$ruri.user")){
                send_reply("420", "Invalid Destination");
				exit;
        }

		xlog("L_INFO", "$ci|P28-openSIPS|dest|$avp(dest)\n");

		$avp(callee) = $ru;
	
		xlog("L_INFO", "$ci|P28-openSIPS|checking if usrloc\n");
        if ($avp(dest)=="usrloc") {
                #Route to usrloc
                route(user_location);
        }
		xlog("L_INFO", "$ci|P28-openSIPS|checking if pstn\n");
        if ($avp(dest)=="pstn") {
                #route to pstn
                route(pstn_routing);
        }
		xlog("L_INFO", "$ci|P28-openSIPS|checking if media\n");
        if ($avp(dest)=="media") {
                #route to media server
                route(media_routing);
        }

		#Route to usrloc
        route(user_location);
		# need to improve
		
        send_reply("420", "Invalid Extension");
        exit;

}

		
route[generic_relay] {
	xlog("$ci|P28-openSIPS|generic_relay|source: $si and method: $rm destination: $dd\n");
	# for INVITEs enable some additional helper routes
	#---- Helper route, if nat=yes in the R-URI  set flag 6 ----#
	#----        This is used to Process REINVITES          ----#
	if (subst_uri('/((sip:.*)||(sip:.*:.*));nat=yes/\1/')){
		xlog("$ci|P28-openSIPS|generic_relay|setting flag 6\n");
		setbflag(6);
	};
	
	#---- If caller(flag 5) or callee(flag 6) are behind NAT  ---#
	#---- Call the route(6) to force the use of the RTP Proxy ---#
	if (is_method("BYE|CANCEL")) {
		xlog("$ci|P28-openSIPS|generic_relay is BYE or CANCEL\n");
		unforce_rtp_proxy();
	} else if (is_method("INVITE|UPDATE")){
		xlog("$ci|P28-openSIPS|generic_relay is INVITE or UPDATE\n");
		#---- Activates the RTP Proxy for the CALLEE ---#
		if(is_from_gw("0") || registered("opensips_location","$fu")) {
			xlog("$ci|P28-openSIPS|generic_relay|rtpproxy_offer external\n");
			engage_rtp_proxy("cowfrei");
			set_advertised_address("10.0.2.10");
		} 
		if(is_from_gw("1")){
			xlog("$ci|P28-openSIPS|generic_relay is from gateway type 1\n");
			engage_rtp_proxy("cowfrie");
			set_advertised_address("54.236.115.203");
		}
	} 
	if (is_method("BYE|ACK")) {
		xlog("$ci|P28-openSIPS|generic_relay is BYE\n");
		#---- Activates the RTP Proxy for the CALLEE ---#
		if(is_from_gw("0") || registered("opensips_location","$fu")) {
			set_advertised_address("10.0.2.10");
		} 
		if(is_from_gw("1")){
			set_advertised_address("54.236.115.203");
		}
	}
	if (!t_relay()) {
		xlog("$ci|P28-openSIPS|generic_relay|relay error\n");
		sl_reply_error();
	};
	t_on_reply("3");
	exit;
}

route[generic_relay_internal] {
	xlog("$ci|P28-openSIPS|generic_relay_internal|source: $si and method: $rm destination: $dd\n");
	# for INVITEs enable some additional helper routes
	#---- Helper route, if nat=yes in the R-URI  set flag 6 ----#
	#----        This is used to Process REINVITES          ----#
	if (subst_uri('/((sip:.*)||(sip:.*:.*));nat=yes/\1/')){
		xlog("$ci|P28-openSIPS|generic_relay|setting flag 6\n");
		setbflag(6);
	};

	if (!t_relay()) {
		xlog("$ci|P28-openSIPS|generic_relay|relay error\n");
		sl_reply_error();
	};
	t_on_reply("4");
	exit;
}

route[presence_handling]
{
	xlog("$ci|P28-openSIPS|presence_handling|start\n");
	if (!t_newtran()){
		log("$ci|P28-openSIPS|presence_handling|failed t_newtran\n");
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH")) {
		xlog("$ci|P28-openSIPS|presence_handling|PUBLISH\n");
		handle_publish();
	}
	else
	if( is_method("SUBSCRIBE")) {
		xlog("$ci|P28-openSIPS|presence_handling|SUBSCRIBE\n");
		handle_subscribe();
	}
	exit;
}



route[user_location]{
	xlog("L_INFO", "$ci|P28-openSIPS|user_location\n");
	if (!lookup("opensips_location", "m")) {
		switch ($retcode) {
			case -1:
				xlog("L_INFO", "$ci|P28-openSIPS|user_location error -1 no contact found.\n");
				t_newtran();
				send_reply("404", "Not Found");
				exit;
			case -3:
				xlog("L_INFO", "$ci|P28-openSIPS|user_location error -3 internal error during processing\n");
				t_newtran();
				send_reply("404", "Not Found");
				exit;
			case -2:
				xlog("L_INFO", "$ci|P28-openSIPS|user_location error -2 - method not supported\n");
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}
	xlog("L_INFO", "$ci|P28-openSIPS|user_location FOUND\n");
	setflag(26);
	# when routing via usrloc, log the missed calls also
	setflag(2); # Account missed calls

	t_on_failure("user_failure");

	route(generic_relay);
}


route[pstn_routing] {  ### THIS ALREADY USES DROUTING MODULE
	xlog("$ci|P28-openSIPS|pstn_routing|source: $si and method: $rm destination: $dd\n");
#	if (!db_is_user_in("from","pstn") ) {
#		send_reply("403", "No pstn calls");
#        	exit;
#	}
	if(!route_to_gw("0")){
		send_reply("503", "No destination for the prefix");
       	exit;
	}
#	set_advertised_address("63.137.85.48");
	t_on_failure("gw_failure");

	route(generic_relay);
}

route[media_routing] {
	xlog("L_INFO", "$ci|P28-openSIPS|media_routing\n");
	route(lb_media_routing);
}

route[lb_media_routing] {
	#---- load balance to media servers ----#
	xlog("L_INFO", "$ci|P28-openSIPS|load balance to media servers\n");
	if(load_balance("1","media","1")) {
		route(generic_relay);
	}
	else
	{
		xlog("L_INFO", "$ci|P28-openSIPS|load balance failed\n");
	}
	
	if ($retcode<0){
		xlog("L_INFO", "$ci|P28-openSIPS|load balance return code $retcode\n");
		sl_send_reply("500","Service full");
		exit;
	}
}

route[lb_media_routing_internal] {
	#---- load balance to media servers ----#
	xlog("L_INFO", "$ci|P28-openSIPS|load balance to media servers\n");
	if (pcre_match("$tU", "^(1?555.*)")) {
		if(load_balance("1","media","1")) {
			route(generic_relay_internal);
		}
		else
		{
			xlog("L_INFO", "$ci|P28-openSIPS|load balance failed\n");
		}
	} else {
		if(load_balance("2","media","1")) {
			route(generic_relay_internal);
		}
		else
		{
			xlog("L_INFO", "$ci|P28-openSIPS|load balance failed\n");
		}
	}
	if ($retcode<0){
		xlog("L_INFO", "$ci|P28-openSIPS|load balance return code $retcode\n");
		sl_send_reply("500","Service full");
		exit;
	}
}

route[test_routing] {
        #---- load balance to media servers ----#
        xlog("L_INFO", "$ci|P28-openSIPS|load balance to media test servers\n");
        if(load_balance("3","media","1")) {
                route(generic_relay);
        }
        else
        {
              xlog("L_INFO", "$ci|P28-openSIPS|load balance failed\n");
        }
        if ($retcode<0){
                xlog("L_INFO", "$ci|P28-openSIPS|load balance return code $retcode\n");
                sl_send_reply("500","Service full");
                exit;
        }
}

onreply_route[2] {
	xlog("$ci|P28-openSIPS|onreply_route|source: $si and method: $rm destination: $dd\n");
	if (t_check_status("100")) {
		xlog("$ci|P28-openSIPS|100\n");
	}
	if (t_check_status("180")) {
		xlog("$ci|P28-openSIPS|180\n");
	}
	if (t_check_status("200")) {
		xlog("$ci|P28-openSIPS|200\n");
	}
	
	if ( is_method("INVITE") && 
	(isflagset(5) || isbflagset(6)) &&
	has_body("application/sdp") ){
		xlog("$ci|P28-openSIPS|onreply_route|INVITE and has sdp and (flag 5 or flag 6)\n");
	} else if(t_check_status("200") && has_body("application/sdp")){
		xlog("$ci|P28-openSIPS|onreply_route|200 and has sdp\n");
	}

	exit;
}

onreply_route[3] {
	xlog("$ci|P28-openSIPS|onreply_route[3]|source: $si and method: $rm destination: $dd\n");
	#---- Handling of the SDP for the 200 or 183 reply ----#
	#---- If behind nat (flags 5 or 6) start RTP Proxy ----#
	#----    Activates the RTP Proxy for the CALLER    ----#
    if ( is_method("INVITE") && has_body("application/sdp") ){
		xlog("$ci|P28-openSIPS|onreply_route[3]|INVITE and has sdp\n");
	}
	if (search("Record-Route: <sip:10.0.2.10;")) {
		replace_all("Record-Route: <sip:10.0.2.10;", "Record-Route: <sip:54.236.115.203;");
	} else if (search("Record-Route: <sip:54.236.115.203;")) {
		replace_all("Record-Route: <sip:54.236.115.203;", "Record-Route: <sip:10.0.2.10;");
	}
	exit;
}


onreply_route[4] {
	xlog("$ci|P28-openSIPS|onreply_route[4]|source: $si and method: $rm destination: $dd\n");
	#---- Handling of the SDP for the 200 or 183 reply ----#
	#---- If behind nat (flags 5 or 6) start RTP Proxy ----#
	exit;
}

failure_route[user_failure] {
	xlog("$ci|P28-openSIPS|user_failure\n");
	#---- If a failure has ocurred, deactivate the RTP Proxy ----#
	if (isflagset(5) || isbflagset(6)){
#		unforce_rtp_proxy();
	}

	if (t_was_cancelled()) {
		exit;
	}

	if ( db_is_user_in("from","voicemail") ) {
	        # Redirect busy calls to a media server 
		$ru = $avp(callee);
#		sethostport("63.137.85.48:5090");
		t_relay();
        }

}


failure_route[gw_failure] {
	if (t_was_cancelled()) {
		exit;
	}

	if ( t_check_status("(56)[0-9][0-9]") ) { 
		if (use_next_gw()) {
			xlog ("next gateway $ru \n");
	    		t_relay();
           		exit;
		} else {
			t_reply("503", "Service not available, no more gws");
      			exit;
		}
	}
}